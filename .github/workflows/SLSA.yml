name: Build, Sign, and Attest Container Image with SLSA Provenance

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: read
      attestations: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Lowercase Variables
        run: |
          echo "LOWERCASE_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_NAME=pastebin" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.LOWERCASE_OWNER }}/${{ env.IMAGE_NAME }}:latest

      # Store the full image reference for later use
      - name: Set Image Reference
        run: |
          echo "IMAGE_REF=ghcr.io/${{ env.LOWERCASE_OWNER }}/${{ env.IMAGE_NAME }}@${{ steps.build_and_push.outputs.digest }}" >> $GITHUB_ENV

      - name: Generate and Attach SLSA Provenance Attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ env.LOWERCASE_OWNER }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.2.0
        with:
          cosign-release: 'v2.2.0'

      # Add a small delay and verification step
      - name: Wait and Verify Attestation
        run: |
          echo "Waiting for attestation to be available..."
          sleep 15
          echo "Verifying image reference: ${{ env.IMAGE_REF }}"
          cosign verify-attestation --type slsaprovenance ${{ env.IMAGE_REF }} || true

      - name: Download Attestation
        env:
          COSIGN_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cosign download attestation --predicate-type slsaprovenance ${{ env.IMAGE_REF }} > attestation.jsonl
          # Verify the file is not empty
          if [ ! -s attestation.jsonl ]; then
            echo "Error: attestation.jsonl is empty"
            exit 1
          fi
          cat attestation.jsonl

      - name: Upload Attestation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: attestation
          path: attestation.jsonl